#! /usr/bin/python
# This file is part of kwapi-g5k
#
# It allows to configure automatically the probes using the reference API
#


from socket import getfqdn
from pprint import pprint
from execo import Process, logger
from execo_g5k import get_site_clusters, get_cluster_hosts, get_host_attributes, get_resource_attributes, topology, config, get_site_network_equipments, get_network_equipment_attributes, get_site_hosts
import re
from pysnmp.entity.rfc3413.oneliner import cmdgen

_community = 'public'
_protocol_power = '1'
_protocol_network = '2c'
_output_dir = '/etc/kwapi'

# Determining site
hostname = getfqdn().split('.')
site = hostname[1] if len(hostname) > 2 else hostname[0]
# site = 'lyon'

def to_long_uid(uid, site):
    if uid:
        return "%s.%s.grid5000.fr" % (uid, site)
    else:
        return None

cmd_gen = cmdgen.CommandGenerator()
def retrieve_switch_if(switch):
    community = cmdgen.CommunityData('public',mpModel=1)
    errorIndication, errorStatus, errorIndex, varBindTable = \
        cmd_gen.bulkCmd(
            community,
            cmdgen.UdpTransportTarget((switch, 161)),
            1, 0,
            '1.3.6.1.2.1.2.2.1.2', # IfDescr OID
        )
    if errorIndication:
        logger.error(errorIndication)
        return None
    else:
        if errorStatus:
            logger.error('%s at %s' % (
                errorStatus.prettyPrint(),
                errorIndex and varBindTable[-1][int(errorIndex)-1] or '?'
            ))
            return None
        else:
            ifDescr_list = []
            for varBindTableRow in varBindTable:
                for name, value in varBindTableRow:
                    ifDescr_list.append(str(value))
            return ifDescr_list

def format_host_name(host):
    return re.sub(r"renater(-.*)", "renater", host)

def format_host_port(port):
    return '-' + port.replace("/", "").replace(":", "")

def format_probes(probes_list, switch, site, is_probe_name):
    """Format probes:
    Take probe list and format it for config file
    """
    probes_list = map(lambda x: x if x else (None, None), probes_list)
    if not is_probe_name:
        return [("%s.%s.%s" % (site, switch, y) if x else None) for x, y in probes_list]
    else:
        return [("%s.%s" % (site, x) if x else None) for x, y in probes_list]

logger.info('Generating configuration of kwapi-drivers for %s',
            site)

logger.info('Retrieving monitoring equipments information')
equips = {}
try:
    for pdu in get_resource_attributes('/sites/'+site+'/pdus/')['items']:
        if pdu.has_key('sensors'):
            for sensor in pdu['sensors']:
                if sensor.has_key('power'):
                    if 'snmp' in sensor['power']:
                        if sensor['power']['per_outlets']:
                            oid = sensor['power']['snmp']['outlet_prefix_oid']
                        else:
                            oid = sensor['power']['snmp']['total_oids'][0][0:-2]
                        equips[pdu['uid']] = {'driver': 'Snmp', 'parameters':
                            {'community': _community, 'protocol': _protocol_power,
                             'ip': pdu['uid'] + '.' + site + '.grid5000.fr',
                             'oid': oid }, 'mapping': [], 'probes': [], 'probes_names': []}
                    if 'wattmetre' in sensor['power']:
                        equips[pdu['uid']] = {'driver': 'Json_url', 'parameters':
                            {'url': sensor['power']['wattmetre']['www']['url']},
                            'mapping': [], 'probes': [], 'probes_names': []}
except Exception as e:
    logger.error('Fail to retrieve power equipments: %s' % e)

logger.info('Retrieving network equipments information')
switchs = {}
hosts_cluster = get_site_hosts(site, queues=None)+[u"renater"]

try:
    for network_equipment in get_site_network_equipments(site):
        network_equipment = get_network_equipment_attributes(network_equipment)
        switch = network_equipment.get("uid", None)
        switch_uid = to_long_uid(switch, site)
        # Iter on switch linecards/ports
        l = -1
        for linecard in network_equipment.get('linecards', []):
            l+=1
            snmp_pattern = linecard.get('snmp_pattern', None)
            if not snmp_pattern:
                logger.warn("No snmp_pattern for %s: %s" % (switch, l))
                continue
            p = -1
            for port in linecard.get('ports',[]):
                p+=1
                host_uid = None
                device_port = ""
                if port.has_key('uid'):
                    host_uid = format_host_name(port['uid'])
                    if port.has_key('port'):
                        device_port = format_host_port(port['port'])
                    if not (to_long_uid(host_uid, site) in hosts_cluster or host_uid in hosts_cluster):
                        host_uid = "%s_%s" % (switch, host_uid)
                #try:
                device = host_uid + device_port if host_uid else None
                port_name = snmp_pattern.replace('%LINECARD%', str(l)).replace('%PORT%', str(p))
                port_uid = "%d-%d" % (l, p)
                if host_uid:
                    if switchs.has_key(switch):
                        if switchs.has_key(port_name):
                            logger.error('Collision on switch %s port %s host %s'
                                         % (switch, port_name, host_uid))
                        switchs[switch][port_name] = (device, port_uid)
                    else:
                        switchs[switch] = {}
                        switchs[switch][port_name] = (device, port_uid)
                #except:
                #    logger.error("Can't write %s:%s:%d:%d:%s" % (switch, snmp_pattern, l, p, host_uid))

except Exception as e:
    logger.error('Failed to retrieve network monitoring')
    logger.error('%s' % e)

logger.info('Retrieving hosts plug mapping')
switch_probes = {}
def map_power(node):
    print node['uid']
    if not 'sensors' in node:
        return
    if not 'power' in node['sensors']:
        return
    power = node['sensors']['power']

    if power['available']:
        if 'pdu' in power['via']:
            if isinstance(power['via']['pdu'], list):
                for pdu in power['via']['pdu']:
                    if 'port' in pdu:
                        equips[pdu['uid'].split('.')[0]]['mapping'].append((node['uid'], pdu['port']))
                    else:
                        if isinstance(pdu, list):
                            logger.error("Malformed pdu : %s" % pdu)
                            return
                        if pdu['uid'] is None:
                            #print power
                            return
                        else:
                            equips[pdu['uid'].split('.')[0]]['mapping'].append((node['uid'], 0))
            else:
                pdu = power['via']['pdu']
                if 'port' in pdu:
                    logger.warning('node ' + node['uid'] + ' has str instead of list for power[\'via\']')
                    equips[pdu['uid'].split('.')[0]]['mapping'].append((node['uid'], pdu['port']))
                else:
                    equips[pdu['uid'].split('.')[0]]['mapping'].append((node['uid'], 0))
        if 'www' in power['via']:
            if not 'per_outlets' in power or power['per_outlets']:
                pass #used to be required to generate a first list of mappings. As from 2016-01-14, found in reference API

logger.info('Map port to hostname')
try:
    for cluster in get_site_clusters(site, queues=None):
        nodes = get_resource_attributes('/sites/' + site + '/clusters/' + cluster + \
                                        '/nodes')['items']
        for node in nodes:
            map_power(node)
    switchs = get_resource_attributes('/sites/' + site + '/network_equipments')['items']
    for switch in switchs:
        map_power(switch)
    servers = get_resource_attributes('/sites/' + site + '/servers')['items']
    for server in servers:
        map_power(server)

except Exception as e:
    logger.error('Failed to map power pdus: %r' % e)

#pprint(equips)
logger.info('Generating probe list for Snmp drivers')
try:
    for pdu in equips:
        equip =equips[pdu]
        if 'mapping' in equip and len(equip['mapping']) > 0:
            # outlet 0 is by convention the global measurement for pdu
            # but a valid mapping for the wattemeter driver
            # If all probed elements are mapped to 0, infer
            # that they all contribute to the same probe 
            if len(filter(lambda x: x[1] != 0, equip['mapping'])) > 0:
                # find the max port number.
		equip['mapping'] = sorted(equip['mapping'], key=lambda x: x[1])
		nb_probes=equip['mapping'][-1][1]
		outlet_offset=1
		if equip['mapping'][0][1]==0:
		   # outlet number usualy start at 1, 
		   # but need to handle the case they start at 0
                   # for the wattmeter probe 
		   nb_probes+=1
		   outlet_offset=0
                equip['probes'] = [None] * nb_probes
                equip['probes_names'] = [None] * nb_probes
		for probe, outlet in equip['mapping']:
		    equip['probes'][outlet-outlet_offset] = "%s.%s" % (pdu, outlet)
                    if equip['probes_names'][outlet-outlet_offset]:
			equip['probes_names'][outlet-outlet_offset].append("%s.%s"% (site, probe))
                    else:
                        equip['probes_names'][outlet-outlet_offset] = ["%s.%s" % (site, probe)]
            else:
                equip['probes'] = ["%s.%s" % (pdu, 0)]
                equip['probes_names'] = [None]
                for probe, outlet in equip['mapping']:
                    if equip['probes_names'][0]:
                        equip['probes_names'][0].append("%s.%s" % (site, probe))
                    else:
                        equip['probes_names'][0] = ["%s.%s" % (site, probe)]
except:
    logger.error('Failed to generate probe list') 

network_probes = {}
topo = {}
try:
    for switch in switchs:
        probes = [None]
        try:
            ifDescr_list = retrieve_switch_if(switch)
            probes = [None] * len(ifDescr_list)
        except:
            logger.error('Failed to retrieve switch info via SNMP: %s' % switch)
            continue
        for port_name in switchs[switch]:
            if not port_name in ifDescr_list:
                logger.error("Port %s not found in %s" % (port_name, switch))
            else:
                probes[ifDescr_list.index(port_name)+1] = switchs[switch][port_name]
        while not probes[-1]:
            probes.pop()
            if len(probes) == 0:
                break
        switch_probes[switch] = probes
except Exception as e:
    logger.error('Failed to generate probe list: %s' % e)

for switch in switchs:
    try:
        probes_uid = format_probes(switch_probes[switch], switch, site, False)
        probes_names = format_probes(switch_probes[switch], switch, site, True)
	network_probes[switch] = {'uid':probes_uid[1:],
				  'names':probes_names[1:],}
    except Exception as e:
        logger.error('Failed to generation configuration for %s: %s' % (switch, e))
# pprint(topo)
# pprint(equips)
# pprint(network_probes)
logger.info('Writing new configuration file')
powerProbes = []
f = open('/tmp/kwapi-drivers-list.conf', 'w')
for equip, data in equips.iteritems():
    if 'probes' in data and data['probes']:
        sec = "\n["+equip+"]\n"
        sec += "probes = ["
        for probe in data['probes']:
            if probe:
                sec += "'%s.%s'" % (site, probe)
                powerProbes.append(site + '.' + probe)
            else:
                sec += str(None)
            sec += ", "
        sec += "]\n"
        sec += "probes_names = ["
        for probe in data['probes_names']:
            if not type(probe) == list:
                if probe:
                    sec += "'%s'" % probe
                else:
                    sec += str(None)
            else:
                sec += "["
                for p in probe:
                    if p:
                        sec += "'%s'" % p
                    else:
                        sec += str(None)
                    sec += ", "
                sec += "]"
            sec += ", "
        sec += "]\n"
        sec += "driver = "+data['driver']+"\n"
        sec += "data_type = {'name':'power', 'type':'Gauge', 'unit':'W'}\n"
        sec += "parameters = "+str(data['parameters']) + "\n"
        f.write(sec)

OID_IN  = "1.3.6.1.2.1.31.1.1.1.6"
OID_OUT = "1.3.6.1.2.1.31.1.1.1.10"

for switch, probes in network_probes.iteritems():
    sec = "\n[%s-IN]\n" % switch
    sec += "probes = ["
    for probe in probes['uid']:
        if probe:
            sec += "'" + probe + "'"
        else:
            sec += str(None)
        sec += ", "
    sec += "]\n"
    sec += "probes_names = ["
    for probe in probes['names']:
        if not type(probe) == list:
            if probe:
                sec += "'%s'" % probe
            else:
                sec += str(None)
        else:
            sec += "["
            for p in probe:
                if p:                             
                    sec += "'%s'" % p
                else:
                    sec += str(None)
                sec += ", "
            sec += "]"
        sec += ", "
    sec += "]\n"
    sec += "driver = Snmp\n"
    sec += "data_type = {'name':'network_out', 'type':'Cumulative', 'unit':'B'}\n"
    sec += "parameters = {'protocol': '"+_protocol_network+"', 'community': 'public', 'ip': '"+switch+"."+site+".grid5000.fr', 'oid': '"+OID_IN+"'}\n"
    f.write(sec)
    sec = "\n[%s-OUT]\n" % switch
    sec += "probes = ["
    for probe in probes['uid']:
        if probe:
            sec += "'" + probe + "'"
        else:
            sec += str(None)
        sec += ", "
    sec += "]\n"
    sec += "probes_names = ["
    for probe in probes['names']:
        if not type(probe) == list:
            if probe:
                sec += "'%s'" % probe
            else:
                sec += str(None)
        else:
            sec += "["
            for p in probe:
                if p:                             
                    sec += "'%s'" % p
                else:
                    sec += str(None)
                sec += ", "
            sec += "]"
        sec += ", "
    sec += "]\n"
    sec += "driver = Snmp\n"
    sec += "data_type = {'name':'network_in', 'type':'Cumulative', 'unit':'B'}\n"
    sec += "parameters = {'protocol': '"+_protocol_network+"', 'community': 'public', 'ip': '"+switch+"."+site+".grid5000.fr', 'oid': '"+OID_OUT+"'}\n"
    f.write(sec)
f.close()
f = open('/tmp/kwapi-live-list.conf', 'w')
f.write("\n[TOPO]\n")
f.write("topo=")
f.write(str(topo))
f.flush()
f.write("\npowerProbes = %s" % powerProbes)
f.close()

logger.info('Adding drivers from API to %s/drivers.conf' % _output_dir)
bak_conf = Process('[ -f %s/drivers.conf.orig ] && cp %s/drivers.conf.orig %s/drivers.conf || cp %s/drivers.conf %s/drivers.conf.orig' % (_output_dir, _output_dir, _output_dir, _output_dir, _output_dir))
bak_conf.shell = True
bak_conf.run()
cat_conf = Process('cat /tmp/kwapi-drivers-list.conf >> %s/drivers.conf ; rm /tmp/kwapi-drivers-list.conf' % _output_dir)
cat_conf.shell = True
cat_conf.run()
logger.info('Adding probe-list from API to %s/live.conf' % _output_dir)
logger.info('Adding topology to %s/live.conf' % _output_dir)
bak_conf = Process('[ -f %s/live.conf.orig ] && cp %s/live.conf.orig %s/live.conf || cp %s/live.conf %s/live.conf.orig' % (_output_dir, _output_dir, _output_dir, _output_dir, _output_dir))
bak_conf.shell = True
bak_conf.run()
cat_conf = Process('cat /tmp/kwapi-live-list.conf >> %s/live.conf ; rm /tmp/kwapi-live-list.conf'% _output_dir)
cat_conf.shell = True
cat_conf.run()

logger.info('Done')

